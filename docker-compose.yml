# Docker Compose para Actix API CRUD
# Etapa 4 Aperfeiçoamento: Ambiente completo de desenvolvimento

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: actix-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: actix_crud_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - actix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d actix_crud_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Actix Web API (será adicionado depois)
  # actix-api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: actix-api
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/actix_crud_db
  #     - RUST_LOG=info
  #     - APP_PORT=8080
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - actix-network

  # Adminer - Interface Web para PostgreSQL
  adminer:
    image: adminer:latest
    container_name: actix-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: "flat"
    depends_on:
      - postgres
    networks:
      - actix-network

volumes:
  postgres_data:

networks:
  actix-network:
    driver: bridge
